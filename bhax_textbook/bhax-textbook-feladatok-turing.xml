<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Turing!</title>
    </info>

    <section>
        <title>Végtelen ciklus</title>
        <para>
            Írj olyan C végtelen ciklusokat, amelyek 0 illetve 100 százalékban dolgoztatnak egy magot és egy olyat, amely 
            100 százalékban minden magot!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/lvmi6tyz-nI">https://youtu.be/lvmi6tyz-nI</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="Turing/spin.c">
                <filename>turing/spin.c</filename>
            </link>, <link xlink:href="Turing/idle.c">
                <filename>turing/idle.c</filename>
            </link>, <link xlink:href="Turing/spin_all_cores.c">
                <filename>turing/spin_all_cores.c</filename>
            </link>.
        </para>
        <para>
            Számos módon hozhatunk és hozunk létre végtelen ciklusokat.
            Vannak esetek, amikor ez a célunk, például egy szerverfolyamat fusson folyamatosan és van amikor egy
            bug, mert ott lesz végtelen ciklus, ahol nem akartunk. Saját péláinkban ilyen amikor a PageRank algoritmus
            rázza az 1 liter vizet az internetben, de az iteráció csak nem akar konvergálni...
        </para>
        <para>
            Az alábbi megoldások a végtelen ciklusok mellett tartalmaznak egy pár Linuxos rendszerhívást is,
            ezek azt a célt szolgálják, hogy az ütemező ténylegesen csak egy processzor magot adjon a folyamatunknak,
            vagy éppen az összeset.
        </para>
        <para>
            Egy mag 100 százalékban:
        </para>
	<programlisting language="c"><xi:include href="../turing/spin.c" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting>
        <para>
            Egy mag 0 százalékban
        </para>
        <para>
        Ez ugyan nem egy ciklus, de gyakorlatban a sleep()-pel megoldott várakozások helyett szinte mindig
	    van jobb opció (persze, ha adott ideig akarunk várakozni, akkor rendben van). Várhatunk szinkronizálási objektumokra, szignálokra,
	    IO eseményekre, stb... Ez a példa a SIGINT szignált várja:
        </para>
      	<programlisting language="c"><xi:include href="../turing/idle.c" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting>
        <para>
            Minden mag 100 százalékban (az OMP-s megoldásnál kicsit explicitebb módon, POSIX szálakkal; persze az eredmény lényegében ugyanaz):
        </para>
	<programlisting language="c"><xi:include href="../turing/spin_all_cores.c" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting>
        <para>
Ha a fenti programokra ránézünk a <command>top</command> parancs kimenetében, láthatjuk, hogy tényleg a várt módon használják a CPU-t.
        </para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/2-1-top.png" scale="90"/>
                </imageobject>
                <textobject>
                    <phrase>Egy kivágás a top parancs kimenetéből</phrase>
                </textobject>
            </mediaobject>
        <tip>
            <title>Werkfilm</title>
            <itemizedlist>
                <listitem>
                    <para>
                        <link xlink:href="https://youtu.be/lvmi6tyz-nI">https://youtu.be/lvmi6tyz-nI</link>
                    </para>
                </listitem>
            </itemizedlist>
        </tip>
    </section>

    <section>
        <title>Lefagyott, nem fagyott, akkor most mi van?</title>
        <para>
            Mutasd meg, hogy nem lehet olyan programot írni, amely bármely más programról eldönti, hogy le fog-e fagyni vagy sem!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:  tegyük fel, hogy akkora haxorok vagyunk, hogy meg tudjuk írni a <function>Lefagy</function>
            függvényt, amely tetszőleges programról el tudja dönteni, hogy van-e benne vlgtelen ciklus:
        </para>
        <programlisting language="c"><![CDATA[Program T100
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	main(Input Q)
	{
		Lefagy(Q)
	}
}]]>
        </programlisting>
        <para>
            A program futtatása, például akár az előző <filename>v.c</filename> ilyen pszeudókódjára:
            <screen><![CDATA[T100(t.c.pseudo)
true]]></screen>
            akár önmagára
            <screen><![CDATA[T100(T100)
false]]></screen> 
            ezt a kimenetet adja.
        </para>
        <para>
            A T100-as programot felhasználva készítsük most el az alábbi T1000-set, amelyben a
            Lefagy-ra épőlő Lefagy2 már nem tartalmaz feltételezett, csak csak konkrét kódot:
        </para>
        <programlisting language="c"><![CDATA[Program T1000
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	boolean Lefagy2(Program P)
	{
		 if(Lefagy(P))
			return true;
		 else
			for(;;); 
	}

	main(Input Q)
	{
		Lefagy2(Q)
	}

}]]>
        </programlisting>
        <para>
            Mit for kiírni erre a <computeroutput>T1000(T1000)</computeroutput> futtatásra?

            <itemizedlist>
                <listitem>
                    <para>Ha T1000 lefagyó, akkor nem fog lefagyni, kiírja, hogy true</para>
                </listitem>
                <listitem>
                    <para>Ha T1000 nem fagyó, akkor pedig le fog fagyni...</para>
                </listitem>
            </itemizedlist>
            akkor most hogy fog működni? Sehogy, mert ilyen <function>Lefagy</function>
            függvényt, azaz a T100 program nem is létezik.
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>

    <section>
        <title>Változók értékének felcserélése</title>
        <para>
            Írj olyan C programot, amely felcseréli két változó értékét, bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk">https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk</link>
        </para>
<para>A megszokott megoldás két változó értékének felcserélésére egy segédváltozó használata:</para>
<programlisting language="c"><![CDATA[
    int a, b;
    /* ... */

    int c = a;
    a = b;
    b = c;
]]></programlisting>
<para>Bizonyos típusú változókat kivonással is felcserélhetünk:</para>
<programlisting language="c"><![CDATA[
    a -= b;
    b += a;
    a = b - a;
]]></programlisting>
<para>Egy még érdekesebb (és a legtöbb típusra alkalmazható) megoldás a bitenkénti kizáró vagy:</para>
<programlisting language="c"><![CDATA[
    a ^= b;
    b ^= a;
    a ^= b;
]]></programlisting>
<para>Ezek mellett van lehetőségünk stringek használatára (noha ez ilyen formában a valóságban teljesen haszontalan):</para>
<programlisting language="c"><![CDATA[
    char buffer[32];

    snprintf(buffer, 32, "%d %d", b, a);
    sscanf(buffer, "%d %d", &a, &b);
]]></programlisting>
    </section>

    <section>
        <title>Labdapattogás</title>
        <para>
            Először if-ekkel, majd bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül írj egy olyan programot, ami egy labdát pattogtat a karakteres konzolon! (Hogy mit értek
            pattogtatás alatt, alább láthatod a videókon.)
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/labdapattogas">https://bhaxor.blog.hu/2018/08/28/labdapattogas</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
	<para><emphasis>A feladat megoldása if-ekkel</emphasis></para>
	<programlisting language="c"><![CDATA[
#include <unistd.h>
#include <ncurses.h>
#include <math.h>

int main(int argc, char **argv)
{
    initscr();
    noecho();
    curs_set(0);

    int rows, cols, pos_x, pos_y, vel_x, vel_y;

    pos_x = pos_y = 0;
    vel_x = vel_y = 1;

    while(TRUE)
    {
        pos_x += vel_x;
        pos_y += vel_y;

        getmaxyx(stdscr, rows, cols); //Ha netán átméretezik a terminált, ne okozzon gondot
        if(pos_x > cols - 1) pos_x = cols - 1;
        if(pos_y > rows - 1) pos_y = rows - 1;

        if(pos_x < 1) vel_x *= -1;
        if(pos_y < 1) vel_y *= -1;
        if(pos_x >= cols - 1) vel_x *= -1;
        if(pos_y >= rows - 1) vel_y *= -1;


        clear();

        mvaddch(pos_y, pos_x, 'O');

        refresh();
        usleep(100000);
    }

    endwin();

    return 0;
}
]]></programlisting>
    <para>
Már ebben az egyszerű példában megjelenik a játékoknál (és nem is csak játékoknál) igen gyakori "main loop", ugyanis a programunk lényege egy cikluson belül van. Nagyon sok játéknak ugyanis végsősoron az a célja, hogy másodpercenként (optimális esetben) ~60 képkockát megrajzoljon, és két rajzolás közben ellenőrizze végigmenjen a játék logikáján. A mi esetünkben is valami ilyesmi történik, a while cikluson belül először léptetjük a labda pozícióját és frissítjük a sebességvektorát, majd rajzoljuk a képernyőre.
    </para>
<para>Itt egy képernyőkép a programról, és, hogy szemléletesebb legyen, kivettem belőle a képernyő törlését (clear függvény):</para>
<mediaobject>
                <imageobject>
                    <imagedata fileref="img/bounce.png" scale="90"/>
                </imageobject>
            </mediaobject>
	<para><emphasis>Ugyanez if-ek nélkül</emphasis></para>
<para>Ha nem használhatunk elágazásokat, újra kell gondolnunk a program azon részét, amely a labda pozíciójának határaival és a labda sebességével foglalkoznak:</para>
	<programlisting language="c"><![CDATA[
getmaxyx(stdscr, rows, cols);
if(pos_x > cols - 1) pos_x = cols - 1;
if(pos_y > rows - 1) pos_y = rows - 1;

if(pos_x < 1) vel_x *= -1;
if(pos_y < 1) vel_y *= -1;
if(pos_x >= cols - 1) vel_x *= -1;
if(pos_y >= rows - 1) vel_y *= -1;
]]></programlisting>
<para>Az átméretezéses részt cseréljük le egy modulo alapú megoldásra:</para>
<programlisting language="c"><![CDATA[
getmaxyx(stdscr, rows, cols);
pos_x %= cols;
pos_y %= rows;
]]></programlisting>
<para>A sebesség változtatását (a tényleges "pattogást") pedig oldjuk meg úgy, hogy a sebességvektor komponenseit megszorozzuk valamivel minden iterációban. Ennek a valaminek 1-nek kéne lennie alapesetben, és -1-nek, ha a terminál szélén vagyunk (tengelyenként külön véve). Vezessünk be ehhez egy függvényt:</para>
<programlisting language="c"><![CDATA[
vel_x *= is_within_bounds(pos_x, cols - 1);
vel_y *= is_within_bounds(pos_y, rows - 1);
]]></programlisting>
<para>Már csak ezt a függvényt kell implementálni. Sok megoldást ki lehet találni a problémára, ez a változat az integerosztás sajátosságait használja fel:</para>
<programlisting language="c"><![CDATA[
//A visszatérési érték -1, ha n<=0 vagy n>=max, egyébként pedig 1
int is_within_bounds(int n, int max)
{
    int upper = (n / max) * -2 + 1;
    int lower = ((max - n) / max) * -2 + 1;

    return upper * lower;
}
]]></programlisting>
    </section>

    <section>
        <title>Szóhossz és a Linus Torvalds féle BogoMIPS</title>
        <para>
            Írj egy programot, ami megnézi, hogy hány bites a szó a gépeden, azaz mekkora az <type>int</type> mérete.
            Használd ugyanazt a while ciklus fejet, amit Linus Torvalds a BogoMIPS rutinjában!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/9KnMqrkj_kU">https://youtu.be/9KnMqrkj_kU</link>, 
            <link xlink:href="https://youtu.be/KRZlt1ZJ3qk">https://youtu.be/KRZlt1ZJ3qk</link>, 
            <link xlink:href=""></link>.
        </para>
        <para>
A szóhossz, mint fogalom, alapvetően a jelen hardver
"adatbuszának" a méretére utal (data bus - rémes dolog magyarul informatikáról beszélni).
Ezt szoftveren keresztül nem triviális lekérdezni, bár rendszerinformációkon át
el lehet hozzá jutni, de közvetlenül nem igazán van mód rá.
</para>
<para>
Átfogalmazva a problémát, a gépi szó hossza megfelel annak az adatmennyiségnek,
mellyel a processzor alapvetően egyszerre dolgozni tud (kerüljük ki a Single Instruction Multiple Data kérdéskörét),
ami általában célszerűen egybeesik a főbb regiszterek méretével egy adott architektúrán.
Ezt még mindg nem deríthető ki egyszerűen...
</para>
<para>
A sizeof(int) saját olvasatom szerint nem ad pontos képet a szóhosszról,
többek között az én gépemen sem ad helyes választ.
Egy jobb megoldás a pointerek méretének vizsgálata, mivel sok esetben
a címek hossza gyakran megegyezik a gépi szó méretével (bár még ez a megoldás sem teljesen pontos).
        </para>
<programlisting language="c"><![CDATA[
printf("sizeof(void*) = %zu .. * 8 = %u bits\n\n", sizeof(void*), (unsigned)sizeof(void*) * 8);
]]></programlisting>
<para>
Rátérve a BogoMIPSre, a program alapja az alábbi függvény, amely egy üres ciklusnak megadott számú iterációját hajtja végre.
A BOGOMips alapvetően kalibrálási célt szolgál (elsősorban az udelay/mdelay busy wait függvényekhez,
régebben nagyobb szerepük volt), különböző processzorok összehasonlítására nem jó hasonlítási alap (nem véletlen a "bogo" előtag).
Így esetünkben lényegtelen, hogy ez a ciklus pontosan, instrukcióról instrukcióra hogyan épül fel, és hogy adott architektúrán
hogyan fut le.
</para>
	<programlisting language="c"><![CDATA[
void spin(unsigned long long iter)
{
    for(; iter > 0; iter--);
}
]]>
    </programlisting>
<para>
A <code>main()</code>-ben ezután, nagyságrendekben gondolkodva (2 hatványai), megkeressük a legkisebb <code>loops_per_sec</code>
értéket, amelynél a <code>spin()</code> már tovább fut, mint 1 másodperc. Ha ez megvan, becslésként
a kapott értéket elosztjuk a ténylegesen eltelt idővel.
</para>
    <programlisting language="c">
<![CDATA[
int main(int argc, char **argv)
{
    printf("*** Ténylegesen pontos BOGOMips értékekhez keresd fel a /proc/cpuinfo-t! ***\n");

    unsigned long long loops_per_sec = 1;
    unsigned long long mcsecs;

    while(loops_per_sec <<= 1)
    {
        mcsecs = clock();
        spin(loops_per_sec);
        mcsecs = clock() - mcsecs;

        if (mcsecs >= 1000000)
        {
            loops_per_sec = loops_per_sec / mcsecs * 1000000;
            
            printf("BOGOMips: %llu\n", loops_per_sec / 100000);

            return 0;
        }
    }

    return -1;
}

]]></programlisting>
    </section>

    <section>
        <title>Helló, Google!</title>
        <para>
            Írj olyan C programot, amely egy 4 honlapból álló hálózatra kiszámolja a négy lap Page-Rank 
            értékét!
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
        </para>
        <para>
        A PageRank algoritmus volt a Google óriási sikerének egyik nagy tényezője. Egy igen elegáns, és matematikailag
        robusztus megoldást kínál egy sokoldalú problémára az internetes keresés kérdéskörében:
        </para>
        <para>
        Mely keresési eredmények jelenjenek meg az első találatok között?
        </para>
        <para>
        A PageRank esetében ezt a problémát úgy közelítjük meg, hogy megvizsgáljuk az oldalakon található linkeket, pontosabban
        azt, hogy ezen linkeket véletlenszerűen követve melyik oldalon mekkora eséllyel lyukadunk ki. Furcsának tűnhet elsőre,
        de az így kapott valószínűségeknek máig is fontos szerepük van a keresőmotorok működésében (a neurális hálók egyre nagyobb térnyerése mellett).
        </para>
        <para>A módszer sikeréhez nagyban hozzájárul az, hogy mindez leképezhető mátrix sajátvektorainak kiszámítására, melyeket
        egészen egyszerű iteratív módszerekkel megközelíteni.</para>
        <para>
        Az alábbi források részletesebben összefoglalják az elméleti hátteret:
        </para>
        <itemizedlist>
        <listitem><para><link xlink:href="http://home.ie.cuhk.edu.hk/~wkshum/papers/pagerank.pdf">http://home.ie.cuhk.edu.hk/~wkshum/papers/pagerank.pdf</link></para></listitem>
        <listitem><para><link xlink:href="https://www.cs.princeton.edu/~chazelle/courses/BIB/pagerank.htm">https://www.cs.princeton.edu/~chazelle/courses/BIB/pagerank.htm</link> (egy kissé eltérő megoldás)</para></listitem>
        </itemizedlist>
        <para>
        A megoldásomat megpróbáltam úgy felépíteni, hogy szépen látszódjon az elméleti anyagban leírt <code>x = Ax</code> iterációja:
        </para>
        <programlisting language="c"><![CDATA[
while(1)
{
    if (delta(4, PR, PR_prev) < 0.00001)
        break;

    //PageRank iteration:
    Amulx(4, M, PR, PR_prev);
    swap(PR, PR_prev, sizeof(PR));
}
]]>
    </programlisting>
    <para>
    Ahol az <code>Amulx(n, A, x, result)</code> kiszámítja az A mátrix és az x vektor szorzatát
    és a <code>delta(n, vec, prev_vec)</code> visszaadja két vektor különbségének a hosszát. (Implementáció lentebb)
    </para>
	<programlisting language="c"><![CDATA[
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <math.h>
#include <unistd.h>

void damp_matrix(int n, double mat[n][n], double d);
void Amulx(int n, double A[n][n], double x[n], double result[n]);

void swap(void *a, void *b, size_t len);
double delta(int n, double vec[n], double prev_vec[n]);

void print_array(int n, double array[n]);

int main(void)
{
    /*
        M[i][j] értéke aszerint alakul, hogy
        az j sorszámú oldalon van-e a
        i sorszámú oldalra mutató link.
        M oszlopainak az összege 1
    */
    double M[4][4] = {
        {0.0, 0.0, 0.33, 0.0},
        {1.0, 0.0, 0.33, 1.0},
        {0.0, 0.5, 0.00, 0.0},
        {0.0, 0.5, 0.33, 0.0}
    };

    //"simítunk" a mátrixon (damping); ez egy egész gyakori módszer
    //a "lógó" oldalak által okozott végeten ciklusok elkerülésére
    damp_matrix(4, M, 0.85);

    double PR[4] = {1.0 / 4.0, 1.0 / 4.0, 1.0 / 4.0, 1.0 / 4.0};
    double PR_prev[4] = {0.0, 0.0, 0.0, 0.0};

    while(1)
    {
        if (delta(4, PR, PR_prev) < 0.00001)
            break;

        //PageRank iteration:
        Amulx(4, M, PR, PR_prev);
        swap(PR, PR_prev, sizeof(PR));
    }

    print_array(4, PR);
    return 0;
}



void damp_matrix(int size, double mat[size][size], double d)
{
    for(int i = 0; i < size; i++)
        for(int j = 0; j < size; j++)
            mat[i][j] = d * mat[i][j] + (1.0 - d) / size;
}

void Amulx(int n, double A[n][n], double x[n], double result[n])
{
    for(int i = 0; i < n; i++)
    {
        result[i] = 0;
        for(int j = 0; j < n; j++)
            result[i] += A[i][j] * x[j];
    }
}

double delta(int n, double vec[n], double prev_vec[n])
{
    double sum = 0.0;
    for (int i = 0; i < n; i++)
        sum += (vec[i] - prev_vec[i]) * (vec[i] - prev_vec[i]);
    sum /= n;
    
    return sqrt(sum);
}


void swap(void *a, void *b, size_t len)
{
    char tmp;
    char *ach = (char*)a;
    char *bch = (char*)b;

    for(size_t i = 0; i < len; i++)
    {
        tmp = ach[i];
        ach[i] = bch[i];
        bch[i] = tmp;
    }
}

void print_array(int n, double array[n])
{
    for (int i = 0; i < n; i++)
        printf("%f\n", array[i]);
}
]]></programlisting>
    </section>

    <section xml:id="bhax-textbook-feladatok-turing.MontyHall">
        <title>A Monty Hall probléma</title>
        <para>
            Írj R szimulációt a Monty Hall problémára!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan">https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>

    <section xml:id="Brun">
        <title>100 éves a Brun tétel</title>
        <para>
            Írj R szimulációt a Brun tétel demonstrálására!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/xbYhp9G6VqQ">https://youtu.be/xbYhp9G6VqQ</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R</link>
        </para>
        <para>
            A természetes számok építőelemei a prímszámok. Abban az értelemben, 
            hogy minden természetes szám előállítható prímszámok szorzataként.
            Például 12=2*2*3, vagy például 33=3*11.
        </para>
        <para>
            Prímszám az a természetes szám, amely csak önmagával és eggyel 
            osztható. Eukleidész görög matematikus már Krisztus előtt tudta, 
            hogy végtelen sok prímszám van, de ma sem tudja senki, hogy 
            végtelen sok ikerprím van-e. Két prím ikerprím, ha különbségük 2.
        </para>
        <para>
            Két egymást követő páratlan prím között a legkisebb távolság a 2, 
            a legnagyobb távolság viszont bármilyen nagy lehet! Ez utóbbit 
            könnyű bebizonyítani. Legyen n egy tetszőlegesen nagy szám. 
            Akkor szorozzuk össze n+1-ig a számokat, azaz számoljuk ki az 
            1*2*3*… *(n-1)*n*(n+1) szorzatot, aminek a neve (n+1) faktoriális, 
            jele (n+1)!.
        </para>
        <para>
            Majd vizsgáljuk meg az a sorozatot:
        </para>
        <para>
            (n+1)!+2, (n+1)!+3,… , (n+1)!+n, (n+1)!+ (n+1) ez n db egymást követő azám, ezekre (a jól ismert
            bizonyítás szerint) rendre igaz, hogy
        </para>
        <itemizedlist>
            <listitem>
                <para>(n+1)!+2=1*2*3*… *(n-1)*n*(n+1)+2, azaz 2*valamennyi+2, 2 többszöröse, így ami osztható kettővel</para>
            </listitem>
            <listitem>
                <para>(n+1)!+3=1*2*3*… *(n-1)*n*(n+1)+3, azaz 3*valamennyi+3, ami osztható hárommal</para>
            </listitem>
            <listitem>
                <para>...</para>
            </listitem>
            <listitem>
                <para>(n+1)!+(n-1)=1*2*3*… *(n-1)*n*(n+1)+(n-1), azaz (n-1)*valamennyi+(n-1), ami osztható (n-1)-el</para>
            </listitem>
            <listitem>
                <para>(n+1)!+n=1*2*3*… *(n-1)*n*(n+1)+n, azaz n*valamennyi+n-, ami osztható n-el</para>
            </listitem>
            <listitem>
                <para>(n+1)!+(n+1)=1*2*3*… *(n-1)*n*(n+1)+(n-1), azaz (n+1)*valamennyi+(n+1), ami osztható (n+1)-el</para>
            </listitem>
        </itemizedlist>
        <para>
            tehát ebben a sorozatban egy prim nincs, akkor a (n+1)!+2-nél 
            kisebb első prim és a (n+1)!+ (n+1)-nél nagyobb első 
            prim között a távolság legalább n.            
        </para>
        <para>
            Az ikerprímszám sejtés azzal foglalkozik, amikor a prímek közötti 
            távolság 2. Azt mondja, hogy az egymástól 2 távolságra lévő prímek
            végtelen sokan vannak.
        </para>
        <para>
            A Brun tétel azt mondja, hogy az ikerprímszámok reciprokaiból képzett sor összege, azaz
            a (1/3+1/5)+ (1/5+1/7)+ (1/11+1/13)+... véges vagy végtelen sor konvergens, ami azt jelenti, hogy ezek
            a törtek összeadva egy határt adnak ki pontosan vagy azt át nem lépve növekednek, 
            ami határ számot B<subscript>2</subscript> Brun konstansnak neveznek. Tehát ez
            nem dönti el a több ezer éve nyitott kérdést, hogy az ikerprímszámok halmaza végtelen-e? 
            Hiszen ha véges sok van és ezek
            reciprokait összeadjuk, akkor ugyanúgy nem lépjük át a B<subscript>2</subscript> Brun konstans értékét, 
            mintha végtelen 
            sok lenne, de ezek már csak olyan csökkenő mértékben járulnának hozzá a végtelen sor összegéhez, 
            hogy így sem lépnék át a Brun konstans értékét.     
        </para>
        <para>
            Ebben a példában egy olyan programot készítettünk, amely közelíteni próbálja a Brun konstans értékét.
            A repó <link xlink:href="../../../bhax/attention_raising/Primek_R/stp.r">
                <filename>bhax/attention_raising/Primek_R/stp.r</filename>
            </link> mevű állománya kiszámolja az ikerprímeket, összegzi
            a reciprokaikat és vizualizálja a kapott részeredményt.
        </para>
        <programlisting language="R">
<![CDATA[#   Copyright (C) 2019  Dr. Norbert Bátfai, nbatfai@gmail.com
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>

library(matlab)

stp <- function(x){

    primes = primes(x)
    diff = primes[2:length(primes)]-primes[1:length(primes)-1]
    idx = which(diff==2)
    t1primes = primes[idx]
    t2primes = primes[idx]+2
    rt1plust2 = 1/t1primes+1/t2primes
    return(sum(rt1plust2))
}

x=seq(13, 1000000, by=10000)
y=sapply(x, FUN = stp)
plot(x,y,type="b")
]]>
        </programlisting>
        <para>
            Soronként értelemezzük ezt a programot:
        </para>
        <programlisting language="R">
<![CDATA[ primes = primes(13)]]>
        </programlisting>
        <para>
            Kiszámolja a megadott számig a prímeket.
        </para>
        <screen>
<![CDATA[> primes=primes(13)
> primes
[1]  2  3  5  7 11 13
]]>
        </screen>
        <programlisting language="R">
<![CDATA[ diff = primes[2:length(primes)]-primes[1:length(primes)-1]]]>
        </programlisting>
        <screen>
<![CDATA[> diff = primes[2:length(primes)]-primes[1:length(primes)-1]
> diff
[1] 1 2 2 4 2
]]>
        </screen>
        <para>
            Az egymást követő prímek különbségét képzi, tehát 3-2, 5-3, 7-5, 11-7, 13-11.
        </para>
        <programlisting language="R">
<![CDATA[idx = which(diff==2)]]>
        </programlisting>
        <screen>
<![CDATA[> idx = which(diff==2)
> idx
[1] 2 3 5
]]>
        </screen>
        <para>
            Megnézi a <varname>diff</varname>-ben, hogy melyiknél lett kettő az eredmény, mert azok az ikerprím párok, ahol ez igaz.
            Ez a <varname>diff</varname>-ben lévő 3-2, 5-3, 7-5, 11-7, 13-11 külünbségek közül ez a 2., 3. és 5. indexűre teljesül.
        </para>
        <programlisting language="R">
<![CDATA[t1primes = primes[idx]]]>
        </programlisting>
        <para>
            Kivette a primes-ból a párok első tagját.
        </para>
        <programlisting language="R">
<![CDATA[t2primes = primes[idx]+2]]>
        </programlisting>
        <para>
            A párok második tagját az első tagok kettő hozzáadásával képezzük.
        </para>
        <programlisting language="R">
<![CDATA[rt1plust2 = 1/t1primes+1/t2primes]]>
        </programlisting>
        <para>
            Az 1/t1primes a t1primes 3,5,11 értékéből az alábbi reciprokokat képzi:
        </para>
        <screen>
<![CDATA[> 1/t1primes
[1] 0.33333333 0.20000000 0.09090909
]]>
        </screen>
        <para>
            Az 1/t2primes a t2primes 5,7,13 értékéből az alábbi reciprokokat képzi:
        </para>
        <screen>
<![CDATA[> 1/t2primes
[1] 0.20000000 0.14285714 0.07692308
]]>
        </screen>
        <para>
            Az 1/t1primes + 1/t2primes pedig ezeket a törteket rendre összeadja.
        </para>
        <screen>
<![CDATA[> 1/t1primes+1/t2primes
[1] 0.5333333 0.3428571 0.1678322
]]>
        </screen>
        <para>
            Nincs más dolgunk, mint ezeket a törteket összeadni a 
            <function>sum</function> függvénnyel.
        </para>
        <programlisting language="R">
<![CDATA[sum(rt1plust2)]]>
        </programlisting>
        <screen>
<![CDATA[>   sum(rt1plust2)
[1] 1.044023
]]>
        </screen>
        <para>
            A következő ábra azt mutatja, hogy a szumma értéke, hogyan nő, egy határértékhez tart, a 
            B<subscript>2</subscript> Brun konstanshoz. Ezt ezzel a csipettel rajzoltuk ki, ahol először a fenti 
            számítást 13-ig végezzük, majd 10013, majd 20013-ig, egészen 990013-ig, azaz közel 1 millióig.
            Vegyük észre, hogy az ábra első köre, a 13 értékhez tartozó 1.044023.
        </para>
        <programlisting language="R">
<![CDATA[x=seq(13, 1000000, by=10000)
y=sapply(x, FUN = stp)
plot(x,y,type="b")]]>
        </programlisting>
        <figure>
            <title>A B<subscript>2</subscript> konstans közelítése</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/BrunKorok.png" scale="50"/>
                </imageobject>
                <textobject>
                    <phrase>A B<subscript>2</subscript> konstans közelítése</phrase>
                </textobject>
            </mediaobject>
        </figure>
        <tip>
            <title>Werkfilm</title>
            <itemizedlist>
                <listitem>
                    <para>
                        <link xlink:href="https://youtu.be/VkMFrgBhN1g">https://youtu.be/VkMFrgBhN1g</link>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <link xlink:href="https://youtu.be/aF4YK6mBwf4">https://youtu.be/aF4YK6mBwf4</link>
                    </para>
                </listitem>
            </itemizedlist>
        </tip>
    </section>
</chapter>
